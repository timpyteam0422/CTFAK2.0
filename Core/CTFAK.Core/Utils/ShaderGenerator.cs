using System;
using System.IO;
using CTFAK.MMFParser.EXE.Loaders;
using CTFAK.Utils;

namespace CTFAK.Core.Utils
{
    public static class ShaderGenerator
    {
        public static void CreateAndDumpShader(Shader shader)
        {
            Logger.Log("Translating shader: " + shader.Name);
            var shaderName = Path.GetFileNameWithoutExtension(shader.Name);
            var fxPath = $"Dumps\\Shaders\\{shaderName}\\{shader.Name}";
            var xmlPath = $"Dumps\\Shaders\\{shaderName}\\{shaderName}.xml";
            Directory.CreateDirectory($"Dumps\\Shaders\\{shaderName}");



            File.WriteAllText(fxPath, shader.Data);
            File.WriteAllText(xmlPath, GenerateXMLContent(shader));


        }

        public static string GenerateXMLContent(Shader shader)
        {
            string content = string.Empty;
            content += $"<effect>\n";
            content += $"<name>{Path.GetFileNameWithoutExtension(shader.Name)}</name>\n";
            content += $"<author>Unknown</author>\n";
            content += $"<description>Generated by CTFAK, all credits to original author</description>\n";

            content += $"\n";

            content += $"<BackgroundTexture>{shader.BackgroundTexture}</BackgroundTexture>\n";

            content += $"\n";

            content += $"<sampler>\n";
            content += $"<index>0</index>\n";
            content += $"<filter>linear</filter>\n";
            content += $"</sampler>\n";
            content += $"\n";

            foreach (ShaderParameter parameter in shader.Parameters)
            {
                content += $"<parameter>\n";
                content += $"        <name>{parameter.Name}</name>\n";
                content += $"        <code>{parameter.Name}</code>\n";
                content += $"        <type>{parameter.GetValueType()}</type>\n";//TODO:Shader Type
                content += $"        <property>edit</property>\n";
                content += $"        <value>1.0</value>\n";
                content += $"</parameter>\n";
            }
            content += $"</effect>\n";





            return content;


        }

    }
}